#!/bin/bash
set -o nounset
set -o errexit
set -o pipefail
set -ex

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SRC_DIR=$(dirname $SCRIPT_DIR)

VERSION="0.0.1"
AY_REGION=${AY_REGION:-"us-east-1"} 
AY_PREFIX=${AY_PREFIX:-"labay"}
AY_BASE_DOMAIN=${AY_BASE_DOMAIN:-"alicloud-dev.devcluster.openshift.com"}

AY_CLUSTER_NAME="$AY_PREFIX$(date +%Y%m%d%H%M%S)"
export AY_CLUSTER_NAME
echo "${AY_CLUSTER_NAME}" > .ay-cluster-name

AY_BUCKET_NAME=${AY_BUCKET_NAME:-"$AY_CLUSTER_NAME-bucket"}
export AY_BUCKET_NAME
echo "${AY_BUCKET_NAME}" > .ay-oss-bucket-name

SSH_PUBLIC_KEY_FILE=${SSH_PUBLIC_KEY_FILE:-"~/.ssh/id_rsa.pub"}
if [ -f "${SSH_PUBLIC_KEY_FILE}" ]; then
    AY_SSH_KEY=$(cat "${SSH_PUBLIC_KEY_FILE}")
    export AY_SSH_KEY
else
    echo "$(date -u --rfc-3339=seconds) - ERROR: failed to find the ssh public key file '${SSH_PUBLIC_KEY_FILE}', abort" && exit 1
fi

echo "=== OpenShift LabAY Install Script $VERSION ==="
echo "pwd: $(pwd)"
echo "whoami: $(whoami)"
echo "cluster: $AY_CLUSTER_NAME"
echo "region: $AY_REGION"
echo "bucket: $AY_BUCKET_NAME"


echo "$(date -u --rfc-3339=seconds) - INFO: Installing openshift clients"

TMP_DIR="$SCRIPT_DIR/.tmp"
INSTALL_DIR="$SCRIPT_DIR/.openshift"

mkdir -p $TMP_DIR
cd $TMP_DIR

REPO_DIR="$SCRIPT_DIR"
cd $REPO_DIR


# OpenShift CLI
if ! command -v oc &> /dev/null
then
    mkdir -p "$TMP_DIR/oc" 
    wget -nv -O "$TMP_DIR/oc/openshift-client-linux.tar.gz" "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz" 
    tar zxvf "$TMP_DIR/oc/openshift-client-linux.tar.gz" -C "$TMP_DIR/oc" 
    sudo mv "$TMP_DIR/oc/oc" "/usr/local/bin/" 
    sudo mv "$TMP_DIR/oc/kubectl" "/usr/local/bin/" 
    rm "$TMP_DIR/oc/openshift-client-linux.tar.gz" 
    oc version client
fi

mkdir -p "$INSTALL_DIR"

echo "$(date -u --rfc-3339=seconds) - INFO: Verify OSS Bucket"
if ! aliyun oss ls | grep -q $AY_BUCKET_NAME
then
    echo "$(date -u --rfc-3339=seconds) - INFO: Create alibaba oss bucket"
    aliyun oss mb oss://$AY_BUCKET_NAME --region $AY_REGION
    aliyun oss resource-group --method put oss://$AY_BUCKET_NAME resource-group.xml
fi

## Assisted Installer Section ##
export AY_OCP_VERSION=${AY_OCP_VERSION:-"4.15.14"}
export AY_MANIFESTS_DIR="$SRC_DIR/.ai/manifests"
mkdir -p "$AY_MANIFESTS_DIR"

cmd="aicli create cluster ${AY_CLUSTER_NAME} -P openshift_version=${AY_OCP_VERSION} -P base_dns_domain=${AY_BASE_DOMAIN} -P ssh_public_key=\"${AY_SSH_KEY}\""
if [[ "${CREATE_SNO_CLUSTER}" == "true" ]]; then
    cmd="${cmd} -P sno=true"
fi
echo "$(date -u --rfc-3339=seconds) - Running Command: '${cmd}'"
eval "${cmd}"
sleep 10 

# check if iso does not exist
export AY_ISO_FILE="${AY_CLUSTER_NAME}.iso"

if ! aliyun oss ls | grep -q $AY_ISO_FILE
then
    echo "$(date -u --rfc-3339=seconds) - INFO: Download iso from assisted installer"
    aicli download iso "$AY_CLUSTER_NAME"
    qemu-img convert -O qcow2 ${AY_CLUSTER_NAME}.iso ${AY_CLUSTER_NAME}.qcow2
fi


export AY_OBJECT_NAME="${AY_CLUSTER_NAME}.qcow2"
# du -sh --block-size=M labay202404191718.qcow2
export AY_OBJECT_SIZE=$(stat --format="%s" ${AY_OBJECT_NAME} | awk '{print int(($1/1024**3)+5)}')
echo "AY_OBJECT_SIZE=$AY_OBJECT_SIZE"

echo "$(date -u --rfc-3339=seconds) - INFO: Upload qcow2 to alibaba oss"
aliyun oss cp $AY_OBJECT_NAME oss://$AY_BUCKET_NAME/ --region $AY_REGION

echo "$(date -u --rfc-3339=seconds) - INFO: Verify image upload"
export AY_QCOW_URL="oss://$AY_BUCKET_NAME/$AY_OBJECT_NAME"
aliyun oss ls $AY_QCOW_URL --region $AY_REGION

#create alibaba custom image from qcow 
echo "$(date -u --rfc-3339=seconds) - INFO: Create alibaba custom image from qcow"
export AY_IMAGE_NAME="${AY_CLUSTER_NAME}-image"

# https://www.alibabacloud.com/help/en/ecs/developer-reference/api-ecs-2014-05-26-importimage?spm=a2c63.p38356.0.0.7c4a2122Z0bC7W
aliyun ecs ImportImage \
    --RegionId $AY_REGION \
    --ImageName $AY_IMAGE_NAME \
    --Architecture x86_64 \
    --Platform CoreOS \
    --BootMode UEFI \
    --ResourceGroupId ${RESOURCE_GROUP_ID} \
    --Description "OpenShift Image for ${AY_CLUSTER_NAME}" \
    --DiskDeviceMapping.1.OSSBucket $AY_BUCKET_NAME \
    --DiskDeviceMapping.1.OSSObject $AY_OBJECT_NAME \
    --DiskDeviceMapping.1.DiskImageSize $AY_OBJECT_SIZE \
    --DiskDeviceMapping.1.Format QCOW2 \
    | tee .import-image.log.json

echo "$(date -u --rfc-3339=seconds) - INFO: Waiting for the ECS image to be available..." 
export AY_IMAGE_ID=$(jq -r '.ImageId' .import-image.log.json)
aliyun_ecs_endpoint=$(aliyun ecs DescribeRegions | jq -c ".Regions.Region[] | select(.RegionId | contains(\"${AY_REGION}\"))" | jq -r .RegionEndpoint)
while true; do
    image_status=$(aliyun ecs DescribeImages --region=${AY_REGION} --endpoint=${aliyun_ecs_endpoint} --ImageId=${AY_IMAGE_ID} | jq -r .Images.Image[].Status)
    if [[ "${image_status}" == "Available" ]]; then
        echo "$(date -u --rfc-3339=seconds) - INFO: The ECS image '${AY_IMAGE_NAME}' ('${AY_IMAGE_ID}') is available."
        break
    else
        echo "$(date -u --rfc-3339=seconds) - INFO: The ECS image '${AY_IMAGE_NAME}' ('${AY_IMAGE_ID}') status: '${image_status}'."
        sleep 30
    fi
done

echo "# Cluster Creation Settings"
echo "export AY_BASE_DOMAIN=$AY_BASE_DOMAIN"
echo "export AY_OCP_VERSION=$AY_OCP_VERSION"
echo "export AY_IMAGE_ID=$AY_IMAGE_ID"
echo "export AY_CLUSTER_NAME=$AY_CLUSTER_NAME"

echo "=== OpenShift LabAY Image Generation Script Done $VERSION ==="