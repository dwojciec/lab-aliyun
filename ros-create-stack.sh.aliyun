#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

AY_REGION=${AY_REGION:-"us-east-1"} 
AY_BUCKET_NAME=${AY_BUCKET_NAME:-"lab-ay-$AY_REGION"}
AY_BASE_DOMAIN=${AY_BASE_DOMAIN:-"alicloud-dev.devcluster.openshift.com"}

export ALIBABA_CLOUD_REGION_ID=$AY_REGION

# Check if the bucket exists
BUCKET_EXISTS=$(aliyun oss ls | grep $AY_BUCKET_NAME)
echo "$(date -u --rfc-3339=seconds) - INFO: BUCKET_EXISTS [$BUCKET_EXISTS]"

if [ -z "$BUCKET_EXISTS" ]; then
  echo "$(date -u --rfc-3339=seconds) - INFO: Bucket $AY_BUCKET_NAME does not exist. Creating..."
  # Create the bucket. Adjust the --acl (access control list) as per your requirement.
  aliyun oss mb oss://$AY_BUCKET_NAME --region $AY_REGION --acl public-read 
  if [ $? -eq 0 ]; then
    echo "$(date -u --rfc-3339=seconds) - INFO: Bucket $AY_BUCKET_NAME created successfully."
  else
    echo "$(date -u --rfc-3339=seconds) - ERROR: Failed to create bucket $AY_BUCKET_NAME."
  fi
else
  echo "$(date -u --rfc-3339=seconds) - INFO: Bucket $AY_BUCKET_NAME already exists."
fi

# Upload ROS template to OSS bucket
AY_OBJECT_NAME="ros/template.ros.yaml"
AY_OBJECT_KEY="oss://$AY_BUCKET_NAME/$AY_OBJECT_NAME"
aliyun oss cp "$DIR/infra/ros/template.ros.yaml" $AY_OBJECT_KEY --region $AY_REGION --force
aliyun oss set-acl $AY_OBJECT_KEY public-read --region $AY_REGION

AY_TEMPLATE_URL="https://$AY_BUCKET_NAME.oss-$AY_REGION.aliyuncs.com/$AY_OBJECT_NAME"
AY_STACK_NAME="${AY_CLUSTER_NAME}"

echo "$(date -u --rfc-3339=seconds) - INFO: Creating Stack $AY_STACK_NAME with template $AY_TEMPLATE_URL"

aliyun ros CreateStack --region $AY_REGION \
    --StackName $AY_STACK_NAME \
    --ResourceGroupId ${RESOURCE_GROUP_ID} \
    --Parameters.1.ParameterKey="RegionId" \
    --Parameters.1.ParameterValue="$AY_REGION" \
    --Parameters.2.ParameterKey="SSHPublicKeyBody" \
    --Parameters.2.ParameterValue="\"${AY_SSH_KEY}\"" \
    --Parameters.3.ParameterKey="EnvId" \
    --Parameters.3.ParameterValue="$AY_STACK_NAME" \
    --Parameters.4.ParameterKey="AIImageId" \
    --Parameters.4.ParameterValue="$AY_IMAGE_ID" \
    --Parameters.5.ParameterKey="DomainName" \
    --Parameters.5.ParameterValue="$AY_BASE_DOMAIN" \
    --Parameters.6.ParameterKey="ClusterName" \
    --Parameters.6.ParameterValue="$AY_CLUSTER_NAME" \
    --Parameters.7.ParameterKey="CreateSnoCluster" \
    --Parameters.7.ParameterValue="${CREATE_SNO_CLUSTER:-false}" \
    --Parameters.8.ParameterKey="CreateCompactCluster" \
    --Parameters.8.ParameterValue="${CREATE_COMPACT_CLUSTER:-false}" \
    --Parameters.9.ParameterKey="BationHostFlag" \
    --Parameters.9.ParameterValue="${CREATE_BASTION_HOST:-false}" \
    --Parameters.10.ParameterKey="BastionHostImageId" \
    --Parameters.10.ParameterValue="${BASTION_HOST_IMAGE_ID:-'m-0xi1wndcxhwnxavcodyj'}" \
    --Parameters.11.ParameterKey="BastionHostSSHKeyPair" \
    --Parameters.11.ParameterValue="${BASTION_HOST_SSH_KEY_PAIR:-'openshift-qe'}" \
    --Parameters.12.ParameterKey="MasterInstanceType" \
    --Parameters.12.ParameterValue="${CONTROL_PLANE_INSTANCE_TYPE:-'ecs.g6.xlarge'}" \
    --Parameters.13.ParameterKey="WorkerInstanceType" \
    --Parameters.13.ParameterValue="${COMPUTE_INSTANCE_TYPE:-'ecs.g6.large'}" \
    --Parameters.14.ParameterKey="ResourceGroupId" \
    --Parameters.14.ParameterValue="${RESOURCE_GROUP_ID}" \
    --TemplateURL $AY_TEMPLATE_URL \
    --read-timeout 60 | tee .ay-stack-create.json

AY_STACK_ID=$(jq -r '.StackId' .ay-stack-create.json)
echo $AY_STACK_ID > .ay-stack-id.txt

if [ ! -z "$AY_STACK_ID" ]; then
  echo "$(date -u --rfc-3339=seconds) - INFO: Stack $AY_STACK_NAME created successfully with ID $AY_STACK_ID."
  aliyun ros GetStack --region $AY_REGION \
    --StackId $AY_STACK_ID
else
  echo "$(date -u --rfc-3339=seconds) - ERROR: Failed to create stack $AY_STACK_NAME."
  exit 1
fi

while true; do
  AY_STACK_STATUS=$(aliyun ros GetStack --region $AY_REGION --StackId $AY_STACK_ID | jq -r '.Status')
  if [ "$AY_STACK_STATUS" == "CREATE_COMPLETE" ]; then
    echo "$(date -u --rfc-3339=seconds) - INFO: Stack $AY_STACK_NAME created successfully."
    break
  elif [ "$AY_STACK_STATUS" == "CREATE_FAILED" ]; then
    echo "$(date -u --rfc-3339=seconds) - ERROR: Stack $AY_STACK_NAME creation failed.CREATE_FAILED"
    break
  elif [ "$AY_STACK_STATUS" == "CREATE_ROLLBACK_COMPLETE" ]; then
    echo "$(date -u --rfc-3339=seconds) - ERROR: Stack $AY_STACK_NAME creation failed. CREATE_ROLLBACK_COMPLETE"
    break
  else
    echo "$(date -u --rfc-3339=seconds) - INFO: Stack $AY_STACK_NAME status: $AY_STACK_STATUS"
    sleep 30
  fi
done

if [[ "${CREATE_BASTION_HOST}" == "true" ]]; then
  # get BastionHostPublicIP from stack
  BASTION_HOST_PUBLIC_IP=$(aliyun ros GetStack --region $AY_REGION --StackId $AY_STACK_ID | jq -r '.Outputs[] | select(.OutputKey == "BastionHostPublicIP") | .OutputValue')
  echo "Bastion host SSH: 'ssh -i <the ssh private key> cloud-user@${BASTION_HOST_PUBLIC_IP}'"
fi
echo "*******"
echo "Stack Id: $AY_STACK_ID"
aliyun ros GetStack --StackId "$AY_STACK_ID" --region "$AY_REGION" 
echo "*******"

echo "$(date -u --rfc-3339=seconds) - INFO: Done."
